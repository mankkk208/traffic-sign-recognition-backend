# pylint: disable=no-member
import os
import base64
from fastapi import APIRouter, UploadFile, File, HTTPException
import vertexai
from vertexai.generative_models import GenerativeModel, SafetySetting, Part

# ===== 1. C·∫•u h√¨nh Google Cloud =====
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = r"C:\Users\Lenovo\Desktop\gen-lang-client-0788085518-6a37c52bd548.json"

PROJECT_ID = "681792955708"  # üîπ Thay b·∫±ng ID c·ªßa d·ª± √°n
LOCATION = "us-central1"      # üîπ Thay b·∫±ng location c·ªßa model
ENDPOINT_ID = "7017585685280325632"  # üîπ Thay b·∫±ng endpoint c·ªßa model fine-tune

# ===== 2. Kh·ªüi t·∫°o Vertex AI =====
vertexai.init(
    project=PROJECT_ID,
    location=LOCATION,
    api_endpoint=f"{LOCATION}-aiplatform.googleapis.com"
)

# ===== 3. Kh·ªüi t·∫°o model ƒë√£ fine-tune =====
model = GenerativeModel(
    f"projects/{PROJECT_ID}/locations/{LOCATION}/endpoints/{ENDPOINT_ID}"
)

# ===== 4. ƒê·ªãnh nghƒ©a router =====
gemini_router = APIRouter()

# ===== 5. C·∫•u h√¨nh AI Chat =====
generation_config = {
    "max_output_tokens": 8192,
    "temperature": 1,
    "top_p": 0.95,
}

# C·∫•u h√¨nh safety (t·∫Øt ch·∫∑n n·ªôi dung)
safety_settings = [
    SafetySetting(category=SafetySetting.HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold=SafetySetting.HarmBlockThreshold.OFF),
    SafetySetting(category=SafetySetting.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold=SafetySetting.HarmBlockThreshold.OFF),
    SafetySetting(category=SafetySetting.HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold=SafetySetting.HarmBlockThreshold.OFF),
    SafetySetting(category=SafetySetting.HarmCategory.HARM_CATEGORY_HARASSMENT, threshold=SafetySetting.HarmBlockThreshold.OFF),
]

@gemini_router.post("/predict/")
async def predict_gemini(file: UploadFile = File(...)):
    try:
        # ===== 6. ƒê·ªçc ·∫£nh t·ª´ file v√† m√£ h√≥a th√†nh Base64 =====
        image_bytes = await file.read()

        # ===== 7. G·ª≠i ·∫£nh ƒë·∫øn model ƒë·ªÉ d·ª± ƒëo√°n =====
        chat = model.start_chat()
        response = chat.send_message([
            Part.from_text("B·∫°n l√† AI nh·∫≠n di·ªán bi·ªÉn b√°o giao th√¥ng Vi·ªát Nam. H√£y d·ª± ƒëo√°n t√™n c√°c bi·ªÉn b√°o trong ·∫£nh, trong ·∫£nh c√≥ th·ªÉ c√≥ m·ªôt ho·∫∑c nhi·ªÅu bi·ªÉn b√°o. Ch·ªâ c·∫ßn n√≥i ra t√™n bi·ªÉn b√°o"),
            Part.from_data(image_bytes, mime_type="image/jpeg"),
        ], generation_config=generation_config, safety_settings=safety_settings)

        # ===== 8. Ki·ªÉm tra k·∫øt qu·∫£ v√† tr·∫£ v·ªÅ =====
        if response.text:
            return {"predicted_sign": response.text}
        else:
            raise HTTPException(status_code=400, detail="Kh√¥ng c√≥ d·ª± ƒëo√°n n√†o ƒë∆∞·ª£c tr·∫£ v·ªÅ t·ª´ Gemini AI")

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
