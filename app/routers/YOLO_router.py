# pylint: disable=no-member
import os
import io
import torch
import cv2
import numpy as np
from PIL import Image

from fastapi import APIRouter, UploadFile, File
from fastapi.responses import JSONResponse
from src.yolo.yolo_detector import YOLODetector

from src.config import MODEL_DIR

CONFIDENCE_THRESHOLD = 0.8
GCS_UPLOAD_URL = "http://localhost:8000/gcs/upload/"
GPT_PREDICT_URL = "http://localhost:8000/gpt/predict/"

# Load YOLO model
yolo_model_path = os.path.join(MODEL_DIR, 'yolo/yolov11s_finetune/weights/best.pt')
yolo_detector = YOLODetector(model_path=yolo_model_path, conf_threshold=CONFIDENCE_THRESHOLD, nms_threshold=0.4)

yolo_router = APIRouter()

@yolo_router.post("/predict/")
async def predict_yolo(file: UploadFile = File(...)):
    """
    Nh·∫≠n ·∫£nh t·ª´ request, x·ª≠ l√Ω v√† d·ª± ƒëo√°n b·∫±ng m√¥ h√¨nh YOLOv8.
    """
    try:
        # ƒê·ªçc ·∫£nh t·ª´ file t·∫£i l√™n
        contents = await file.read()
        image_data = io.BytesIO(contents)
        image = Image.open(image_data)

        # Chuy·ªÉn ƒë·ªïi t·ª´ PIL.Image sang numpy array (OpenCV c√≥ th·ªÉ x·ª≠ l√Ω numpy array)
        image = np.array(image)

        # ƒê·∫£m b·∫£o ·∫£nh c√≥ 3 k√™nh (RGB)
        if image.shape[-1] == 4:  # N·∫øu ·∫£nh c√≥ 4 k√™nh (RGBA)
            image = cv2.cvtColor(image, cv2.COLOR_RGBA2RGB)
        elif image.shape[-1] == 1:  # N·∫øu ·∫£nh l√† grayscale
            image = cv2.cvtColor(image, cv2.COLOR_GRAY2BGR)

        # ƒê·∫£m b·∫£o ·∫£nh c√≥ k√≠ch th∆∞·ªõc ph√π h·ª£p cho YOLO
        image = cv2.resize(image, (320, 320))
        #image = image / 255.0  # Chu·∫©n h√≥a gi√° tr·ªã pixel v·ªÅ [0, 1]
        
        print(f"üì∏ Image received: {file.filename}")

        # D·ª± ƒëo√°n v·ªõi YOLO: Truy·ªÅn ·∫£nh d∆∞·ªõi d·∫°ng numpy ndarray v√†o model
        results = yolo_detector.model(image)

        detected_signs = []
        for result in results:
            for box in result.boxes.data.tolist():
                conf = box[4]
                if conf >= yolo_detector.conf_threshold:
                    class_id = int(box[5])  # class ID c·ªßa bi·ªÉn b√°o
                    label = result.names[class_id]
                    detected_signs.append(f"T√™n bi·ªÉn b√°o: {label}, Confidence: {conf:.2f}")
                    print(f"Detected sign: {label} with Confidence: {conf:.2f}")
        
        # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ª± ƒëo√°n n√†o
        if not detected_signs:
            return JSONResponse(content={"message": "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c bi·ªÉn b√°o"}, status_code=200)
 
        return JSONResponse(content={"Detected signs from YOLO": detected_signs})

    except Exception as e:
        print("‚ùå L·ªói trong API:", str(e))
        return JSONResponse(status_code=500, content={"error": str(e)})
